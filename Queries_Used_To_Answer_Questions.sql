/*QUESTION 1: What is the average weight of a Pokemon by Pokemon Type?*/

SELECT TYPE_NAME, AVG(WEIGHT) AS AVERAGE_WEIGHT
FROM (
	SELECT TYPE_NAME, WEIGHT
	FROM DW_POKEMON.dbo.DIM_POKEMON P
	LEFT JOIN DW_POKEMON.dbo.DIM_TYPE T ON P.TYPE1_KEY = T.TYPE_KEY
	WHERE TYPE1_KEY <> 1000
	UNION ALL
	SELECT TYPE_NAME, WEIGHT
	FROM DW_POKEMON.dbo.DIM_POKEMON P
	LEFT JOIN DW_POKEMON.dbo.DIM_TYPE T ON P.TYPE2_KEY = T.TYPE_KEY
	WHERE TYPE2_KEY <> 1000
) A
GROUP BY TYPE_NAME
ORDER BY TYPE_NAME

/*QUESTION 2: What 5 moves are the most common learnable moves by level-up across all Pokemon?*/
SELECT TOP 5 MOVE_NAME, COUNT(MOVE_NAME) AS LEARNABLE_COUNT, DENSE_RANK() OVER(ORDER BY COUNT(MOVE_NAME) DESC) AS MOVE_RANK
FROM DW_POKEMON.dbo.FACT_LEARNABLE_MOVES F
JOIN DW_POKEMON.dbo.DIM_POKEMON P ON F.POKEMON_KEY = P.POKEMON_KEY 
	AND P.IS_ALTERNATE_FORM = 0 --Ensures that Alternate Forms are not included, as this would overstate move occurrences.
LEFT JOIN DW_POKEMON.dbo.DIM_MOVE M ON F.MOVE_KEY = M.MOVE_KEY
JOIN DW_POKEMON.dbo.DIM_LEARN_METHOD LM ON F.LEARN_METHOD_KEY = LM.LEARN_METHOD_KEY AND LEARN_METHOD = 'LEVEL UP'
GROUP BY F.MOVE_KEY, MOVE_NAME
ORDER BY MOVE_RANK

/*QUESTION 3: Which Pokemon species has the most forms/variants? Need the top 10 ranked greatest to least, and GMax/Mega forms should not be included.*/
SELECT TOP 10 BASE_POKEMON_NAME AS POKEMON_NAME, COUNT(BASE_POKEMON_NAME) AS FORM_COUNT
FROM DW_POKEMON.dbo.DIM_POKEMON
GROUP BY BASE_POKEMON_NAME
ORDER BY FORM_COUNT DESC

/*QUESTION 4: What is the most common method of evolution among each type of Pokemon? Which is the least common?*/
SELECT T.TRIGGER_NAME AS EVOLUTION_METHOD, COUNT(T.TRIGGER_NAME) AS METHOD_COUNT, DENSE_RANK() OVER(ORDER BY COUNT(T.TRIGGER_NAME) DESC) AS METHOD_RANK
FROM DW_POKEMON.dbo.FACT_EVOLUTION F
LEFT JOIN DW_POKEMON.dbo.DIM_TRIGGER T ON T.TRIGGER_KEY = F.TRIGGER_KEY
GROUP BY T.TRIGGER_NAME

/*QUESTION 5: Going by Base Stats alone, which Pokemon receives the biggest "boost" in stats after evolving?*/
SELECT POKEMON_NAME, EVOLUTION_NAME, BASE_HP_INCREASE, BASE_ATTACK_INCREASE, BASE_DEFENSE_INCREASE,
	BASE_SPATTACK_INCREASE, BASE_SPDEFENSE_INCREASE, BASE_SPEED_INCREASE, TOTAL_BASE_STAT_INCREASE
FROM (
	SELECT DISTINCT P.POKEMON_NAME, 
		P2.POKEMON_NAME AS EVOLUTION_NAME, 
		(P2.BASE_HP - P.BASE_HP) AS BASE_HP_INCREASE,
		(P2.BASE_ATTACK - P.BASE_ATTACK) AS BASE_ATTACK_INCREASE,
		(P2.BASE_DEFENSE - P.BASE_DEFENSE) AS BASE_DEFENSE_INCREASE,
		(P2.BASE_SPATTACK - P.BASE_SPATTACK) AS BASE_SPATTACK_INCREASE,
		(P2.BASE_SPDEFENSE - P.BASE_SPDEFENSE) AS BASE_SPDEFENSE_INCREASE,
		(P2.BASE_SPEED - P.BASE_SPEED) AS BASE_SPEED_INCREASE,
		(P2.BASE_HP - P.BASE_HP) + (P2.BASE_ATTACK - P.BASE_ATTACK) + (P2.BASE_DEFENSE - P.BASE_DEFENSE) + 
			(P2.BASE_SPATTACK - P.BASE_SPATTACK) + (P2.BASE_SPDEFENSE - P.BASE_SPDEFENSE) + (P2.BASE_SPEED - P.BASE_SPEED)
			AS TOTAL_BASE_STAT_INCREASE,
		RANK()OVER(ORDER BY (P2.BASE_HP - P.BASE_HP) + (P2.BASE_ATTACK - P.BASE_ATTACK) + (P2.BASE_DEFENSE - P.BASE_DEFENSE) + 
			(P2.BASE_SPATTACK - P.BASE_SPATTACK) + (P2.BASE_SPDEFENSE - P.BASE_SPDEFENSE) + (P2.BASE_SPEED - P.BASE_SPEED) DESC) AS TOTAL_INCREASE_RANK
	FROM DW_POKEMON.dbo.FACT_EVOLUTION F
	LEFT JOIN DW_POKEMON.dbo.DIM_POKEMON P ON F.POKEMON_KEY = P.POKEMON_KEY
	JOIN DW_POKEMON.dbo.DIM_POKEMON P2 ON F.EVOLVES_TO_KEY = P2.POKEMON_KEY 
		AND P2.IS_GMAX = 0 AND P2.IS_MEGA = 0 --Must exclude GMax and Mega forms, as these are temporary stat boosts.
) A
WHERE TOTAL_INCREASE_RANK = 1